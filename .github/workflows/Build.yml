name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ] 

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true # Cancel ongoing runs on the same branch

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    permissions:
      contents: write 
      pull-requests: write 
      security-events: write 

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # Use Azul Zulu JDK
          java-version: 17

      # 3. Cache Gradle dependencies
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-

      # 4. Make Gradle wrapper executable
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Build the project
      - name: Build with Gradle
        run: ./gradlew build

      # 6. Run static analysis (Detekt)
      - name: Run Detekt
        run: ./gradlew detekt

      # 7. Check code formatting (Spotless)
      - name: Run Spotless Check
        run: ./gradlew spotlessCheck

      # 8. Check dependency updates
      - name: Check Dependency Guard
        id: dependencyguard_verify
        continue-on-error: true # Don't stop on failure
        run: ./gradlew dependencyGuard

      # 9. Run unit tests
      - name: Run Unit Tests
        run: ./gradlew test

      # 10. Run Android Lint
      - name: Run Lint
        run: ./gradlew lint

      # 11. Build APK
      - name: Build APK
        run: ./gradlew assembleDebug

      # 12. Generate a coverage report
      - name: Generate Coverage Report
        run: ./gradlew createDebugCoverageReport

      # 13. Upload artifacts (APK and reports)
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: APKs
          path: '**/build/outputs/apk/**/*.apk'

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Test Results
          path: '**/build/test-results/**/*.xml'

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Coverage Report
          path: '**/build/reports/jacoco/**/*.html'

      # 14. Notify Slack about the result
      - name: Notify Slack
        if: always() # Always run (success or failure)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="SUCCESS"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="FAILED"
          fi
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Android CI Job: *'"$STATUS"'* for '${{ github.workflow }}'.
            *Job Details*:
            - *Job Name*: '${{ github.job }}'
            - *Commit*: '${{ github.sha }}'
            - *Branch*: '${{ github.ref_name }}'
            - *Run URL*: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          }' $SLACK_WEBHOOK_URL
